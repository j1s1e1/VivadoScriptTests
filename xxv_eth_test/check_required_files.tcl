#*****************************************************************************************
# Vivado (TM) v2022.1 (64-bit)
#
# xxv_etheret_project_setup.tcl: Tcl script for re-creating project 'xxv_ethernet'
#
# Generated by Vivado on Sun Sep 10 19:20:52 -0700 2023
# IP Build 3524634 on Mon Apr 18 20:55:01 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (xxv_etheret_project_setup.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "c:/Xilinx/Projects/xxv_ethernet/.Xil/xxv_ethernet_2/xxv_ethernet_2.xci"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/ctl_if.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/ptp_2step_ctl_if.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/ptp_2step_usr_if.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/ptp_stat_if.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/stat_if.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/xxv_eth_svw.sv"
#    "C:/Xilinx/Projects/xxv_ethernet/xxv_ethernet.srcs/sim_1/new/xxv_ethernet_tb.sv"
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/Xilinx/Projects/Common/TestBench/axi_stream_if.sv"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/xxv_ethernet.xci"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/ctl_if.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/ptp_2step_ctl_if.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/ptp_2step_usr_if.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/ptp_stat_if.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/stat_if.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/xxv_eth_svw.sv"]"\
 "[file normalize "$origin_dir/xxv_ethernet.srcs/sim_1/new/xxv_ethernet_tb.sv"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/../../../../../../Xilinx/Projects/Common/TestBench/axi_stream_if.sv"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir [ file normalize "./sources/" ]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "xxv_ethernet"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "xxv_etheret_project_setup.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "C:/Xilinx/Projects/xxv_ethernet"]"

# Check for paths and files needed for project creation
set validate_required 1
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}
